
@{
    ViewBag.Title = "Users";
    Layout = "~/Views/Shared/_Popup.cshtml";
}
<div id="gridUsers"></div>

<script type="text/javascript">
    

    function rebindUsers() {
        var urlUsers = getUrl("/api/Users");
        var dataManager = ej.DataManager({
            url: urlUsers,
            adaptor: new ej.WebApiAdaptor()
        });

        ej.WaitingPopup.showDefault();
        dataManager.executeQuery(ej.Query()).done(function (e) {
            $("#gridUsers").ejGrid("instance").option("dataSource", e.result);
        }).always(function () {
            ej.WaitingPopup.hideDefault();
        });
    };

    $(function () {
        var urlUsers = getUrl("/api/Users");
        var dataManager = ej.DataManager({
            url: urlUsers,
            adaptor: new ej.WebApiAdaptor()
        });

        var urlRoles = getUrl("/api/Roles");
        var dataManagerRole = ej.DataManager({
            url: urlRoles,
            adaptor: new ej.WebApiAdaptor()
        });

        ej.WaitingPopup.showDefault();
        var dataRole = [];
        dataManagerRole.executeQuery(ej.Query()).done(function (e) {
            for (var i = 0; i < e.result.length; i++) {
                dataRole.push({
                    Target: e.result[i].Id,
                    TargetName: e.result[i].Name
                });
            }
        }).always(function () {
            ej.WaitingPopup.hideDefault();
        });

        function usersCatalogActionComplete(args) {
            if (currentAction == "add" && args.requestType == "save") {
                alert("El usuario se creó satisfactoriamente y se envió una contraseña temporal a su correo electrónico.");
                currentAction = "";
            }

            ej.WaitingPopup.hideDefault();
        };

        var currentAction = "";

        function usersCatalogActionBegin(args) {

            var request = args.requestType;

            if (request == "add" || request == "edit") {
                currentAction = request;
            } else {
                currentAction = "";
            }

            if (request == "delete") {
                if (!confirm("¿Desea eliminar el usuario seleccionado?")) {
                    args.cancel = true;
                }
            } else if (request == "save") {
                ej.WaitingPopup.showDefault();
            }
        };

        var urlStatusTypes = getUrl("/api/Users/StatusTypes");
        var dataManagerTarget = ej.DataManager({
            url: urlStatusTypes,
            adaptor: new ej.WebApiAdaptor()
        });

        ej.WaitingPopup.showDefault();
        var dataTarget = [];
        dataManagerTarget.executeQuery(ej.Query()).done(function (e) {

            for (var i = 0; i < e.result.length; i++) {
                dataTarget.push({
                    StatusId: e.result[i].Id,
                    Name: translateStatusType(e.result[i].Name)
                });
            }
        }).always(function () {
            ej.WaitingPopup.hideDefault();
        });

        function translateStatusType(status) {
            switch (status) {
                case "Processed": return "Procesado";
                case "Pending": return "Pendiente";
                case "Created": return "Creado";
                default: return "";
            }
        };
        
        var columnsUserPopUp = [
                { field: "Id", isPrimaryKey: true, visible: false },
                { field: "UserName", headerText: 'Usuario', validationRules: { required: true, minlength: 3 }, width: 80 },
                { field: "Name", headerText: 'Nombre', validationRules: { required: true, minlength: 3 }, width: 80 },
                { field: "Email", headerText: 'Correo', validationRules: { required: true, minlength: 3, email: true }, width: 100 },
                { field: "PasswordHash", headerText: 'Contraseña', visible: false },
                {
                    field: "Status", headerText: 'Estado', allowEditing: false, dataSource: dataTarget, width: 50,
                    foreignKeyValue: "Name", foreignKeyField: "StatusId"
                },
                
        ];

        var editUserButtons = {
                    headerText: "Editar",
                    commands: [
                        
                        { type: ej.Grid.UnboundType.Edit, buttonOptions: { contentType: "imageonly", prefixIcon: "e-edit", click: "onClickEdit" } },
                        { type: ej.Grid.UnboundType.Delete, buttonOptions: { contentType: "imageonly", prefixIcon: "e-delete", Id: "deleteCommand" } },
                        { type: ej.Grid.UnboundType.Save, buttonOptions: { contentType: "imageonly", prefixIcon: "e-save" } },
                        { type: ej.Grid.UnboundType.Cancel, buttonOptions: { contentType: "imageonly", prefixIcon: "e-cancel", click: "onClickCancel" } },
                    { type: "Benefits", buttonOptions: { contentType: "imageonly", prefixIcon: "glyphicon glyphicon-refresh", click: "resetPassword" } },
                    ],
                    isUnbound: true,
                    width: 110
        };

        var permissions = JSON.parse(sessionStorage.permissions);
        var usersToolItems = [ej.Grid.ToolBarItems.Search];
        
        for (be = 0; be < permissions.length; be++) {
            var permission = permissions[be];
            if (permission.Option == "Security") {
                if (permission.Edit) {
                    columnsUserPopUp.push(editUserButtons);
                    usersToolItems = [ej.Grid.ToolBarItems.Add, ej.Grid.ToolBarItems.Search];
                }
            }
                }

        $("#gridUsers").ejGrid({
            dataSource: dataManager,
            columns: columnsUserPopUp,
            allowPaging: true,
            allowScrolling: true,
            pageSettings: {pageSize: 7 },
            editSettings: { allowEditOnDblClick: false, allowEditing: true, allowAdding: true, allowDeleting: true },
            toolbarSettings: { showToolbar: true, toolbarItems: usersToolItems },
            endAdd: function () {
                this.refreshContent();
            },
            actionBegin: usersCatalogActionBegin,
            actionComplete: usersCatalogActionComplete,
            actionFailure: function (args) {
                
                if (args.error.responseJSON) {
                    if (args.error.responseJSON.ExceptionMessage != null) {
                        alert(args.error.responseJSON.ExceptionMessage, function () {
                            window.location = window.location.href;
                        });
                    } else {
                        alert(args.error.responseJSON.Message, function () {
                            window.location = window.location.href;
                        });
                    }
                }
                else {
                    alert("Ocurrió un error, la operación no pudo ser completada");
                }                
                ej.WaitingPopup.hideDefault();                
            }
        });
    });

    function onClickDelete() {
        var grid = $("#gridUsers").ejGrid("instance");
        var index = this.element.closest("tr").index();
        var record = grid.getCurrentViewData()[index];
        if (confirm("¿Quiere eliminar este usuario?")) {
            var urlUserDElete = getUrl();
            ej.WaitingPopup.showDefault();
            $.ajax(urlUserDelete, {
                type: "DELETE"
            }).done(function () {
                rebindUsers();
            }).always(function () {
                ej.WaitingPopup.hideDefault();
            });
        }
    };

    function resetPassword() {
        var grid = $("#gridUsers").ejGrid("instance");
        var index = this.element.closest("tr").index();
        var record = grid.getCurrentViewData()[index];
        if (confirm("¿Desea generar una nueva contraseña temporal para el usuario seleccionado?")) {
            ej.WaitingPopup.showDefault();
            var urlResetPassword = getUrl("/api/Users/ResetPassowrd/" + record.Id);
            $.ajax(urlResetPassword, {
                type: "PUT"
            }).done(function () {
                rebindUsers();
            }).fail(function (e) {
                alert(e.responseJSON.ExceptionMessage);
            }).always(function () {
                ej.WaitingPopup.hideDefault();
            });
        }
    };

    function onClickEdit() {        
        $('.e-Eliminarbutton').hide();        
    };

    function onClickCancel() {
        $('.e-Eliminarbutton').show();
    };

</script>

